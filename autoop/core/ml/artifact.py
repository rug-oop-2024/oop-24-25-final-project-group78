from typing import Optional, List, Dict
from pydantic import BaseModel, PrivateAttr
import base64
from copy import deepcopy


class Artifact(BaseModel):
    """
    Artifact model representing a data artifact with associated metadata,
    tags, and type.
    """
    _asset_path: str = PrivateAttr()
    _name: str = PrivateAttr()
    _version: str = PrivateAttr()
    _data: Optional[bytes] = PrivateAttr(default=None)
    _tags: List = PrivateAttr(default_factory=list)
    _metadata: Dict = PrivateAttr(default_factory=dict)
    _type: str = PrivateAttr()

    def __init__(
            self,
            asset_path: str,
            name: str,
            version: str,
            tags: List,
            metadata: Dict,
            type_: str,
            data: Optional[bytes] = None,
    ) -> None:
        """
        Initializes the Artifact with given parameters.

        Args:
            asset_path (str): The path to the asset.
            name (str): The name of the artifact.
            version (str): The version of the artifact.
            type_ (str): The type of the artifact.
            data (Optional[bytes]): The binary data of
            the artifact, default is None.
        """
        super().__init__()
        self._asset_path = asset_path
        self._name = name
        self._version = version
        self._type = type_
        self._data = data
        self._tags = tags
        self._metadata = metadata

    def get_id(self) -> str:
        """
        Generates a unique ID for the artifact
        based on its asset path and version.
        Returns:
            str: Base64 encoded asset path concatenated with the version.
        """
        encoded_path = base64.b64encode(self.asset_path.encode()).decode()

        # Solve issue mentioned in BS
        stripped_path = encoded_path.rstrip('=')

        stripped_version = (self.version.replace('.', '_').
                            replace(';', '_').
                            replace(':', '_').
                            replace('=', '_'))

        return f"{stripped_path}_{stripped_version}"

    def read(self) -> bytes:
        """
        Reads and returns the data of the artifact.
        Returns:
            bytes: The data of the artifact.
        Raises:
            ValueError: If the data is None.
        """
        if self.data is None:
            raise ValueError("The data is None.")
        else:
            return self.data

    def save(self, data: bytes) -> bytes:
        """
        Saves the provided data
        Args:
            data (bytes): Data to be saved in the artifact.
        Returns:
            bytes: The saved data.
        """
        self._data = data
        return self._data

    @property
    def metadata(self) -> Dict:
        """
        Retrieves a copy of the metadata associated with the artifact.
        Returns:
            Dict: A deepcopy of the metadata dictionary.
        """
        return deepcopy(self._metadata)

    @metadata.setter
    def metadata(self, metadata: Dict) -> None:
        """
        Sets the metadata for the artifact.
        Args:
            metadata (Dict): Dictionary containing metadata.
        Raises:
            TypeError: If metadata is not a dictionary.
        """
        if not isinstance(metadata, Dict):
            raise TypeError("Wrong type.")
        self._metadata = metadata

    @property
    def tags(self) -> List:
        """
        Retrieves a copy of the tags associated with the artifact.
        Returns:
            List: A deepcopy of the tags list.
        """
        return deepcopy(self._tags)

    @tags.setter
    def tags(self, tags: List) -> None:
        """
        Sets the tags for the artifact.
        Args:
            tags (List): List of tags.
        Raises:
            TypeError: If tags is not a list.
        """
        if not isinstance(tags, List):
            raise TypeError("Wrong type.")
        self._tags = tags

    @property
    def id(self) -> str:
        """
        Retrieves the unique ID of the artifact.
        Returns:
            str: The unique ID generated by the get_id method.
        """
        return self.get_id()

    @property
    def asset_path(self) -> str:
        """
        Getter for the asset path.

        Returns:
            str: The path to the asset.
        """
        return self._asset_path

    @property
    def name(self) -> str:
        """
        Getter for the name.

        Returns:
            str: The name of the object.
        """
        return self._name

    @property
    def version(self) -> str:
        """
        Getter for the version.

        Returns:
            str: The version of the object.
        """
        return self._version

    @property
    def data(self) -> Optional[bytes]:
        """
        Getter for the data.

        Returns:
            Optional[bytes]: The data as bytes, or None if not set.
        """
        return self._data

    @property
    def type(self) -> str:
        """
        Getter for the type.

        Returns:
            str: The type of the object.
        """
        return self._type
